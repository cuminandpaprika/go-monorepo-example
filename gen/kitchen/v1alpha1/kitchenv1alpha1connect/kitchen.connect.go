// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kitchen/v1alpha1/kitchen.proto

package kitchenv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cuminandpaprika/go-monorepo-example/gen/kitchen/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KitchenServiceName is the fully-qualified name of the KitchenService service.
	KitchenServiceName = "kitchen.v1alpha1.KitchenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KitchenServiceCookFoodProcedure is the fully-qualified name of the KitchenService's CookFood RPC.
	KitchenServiceCookFoodProcedure = "/kitchen.v1alpha1.KitchenService/CookFood"
	// KitchenServicePrepareFoodProcedure is the fully-qualified name of the KitchenService's
	// PrepareFood RPC.
	KitchenServicePrepareFoodProcedure = "/kitchen.v1alpha1.KitchenService/PrepareFood"
)

// KitchenServiceClient is a client for the kitchen.v1alpha1.KitchenService service.
type KitchenServiceClient interface {
	CookFood(context.Context, *connect.Request[v1alpha1.CookFoodRequest]) (*connect.Response[v1alpha1.CookFoodResponse], error)
	PrepareFood(context.Context, *connect.Request[v1alpha1.PrepareFoodRequest]) (*connect.Response[v1alpha1.PrepareFoodResponse], error)
}

// NewKitchenServiceClient constructs a client for the kitchen.v1alpha1.KitchenService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKitchenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KitchenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kitchenServiceMethods := v1alpha1.File_kitchen_v1alpha1_kitchen_proto.Services().ByName("KitchenService").Methods()
	return &kitchenServiceClient{
		cookFood: connect.NewClient[v1alpha1.CookFoodRequest, v1alpha1.CookFoodResponse](
			httpClient,
			baseURL+KitchenServiceCookFoodProcedure,
			connect.WithSchema(kitchenServiceMethods.ByName("CookFood")),
			connect.WithClientOptions(opts...),
		),
		prepareFood: connect.NewClient[v1alpha1.PrepareFoodRequest, v1alpha1.PrepareFoodResponse](
			httpClient,
			baseURL+KitchenServicePrepareFoodProcedure,
			connect.WithSchema(kitchenServiceMethods.ByName("PrepareFood")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kitchenServiceClient implements KitchenServiceClient.
type kitchenServiceClient struct {
	cookFood    *connect.Client[v1alpha1.CookFoodRequest, v1alpha1.CookFoodResponse]
	prepareFood *connect.Client[v1alpha1.PrepareFoodRequest, v1alpha1.PrepareFoodResponse]
}

// CookFood calls kitchen.v1alpha1.KitchenService.CookFood.
func (c *kitchenServiceClient) CookFood(ctx context.Context, req *connect.Request[v1alpha1.CookFoodRequest]) (*connect.Response[v1alpha1.CookFoodResponse], error) {
	return c.cookFood.CallUnary(ctx, req)
}

// PrepareFood calls kitchen.v1alpha1.KitchenService.PrepareFood.
func (c *kitchenServiceClient) PrepareFood(ctx context.Context, req *connect.Request[v1alpha1.PrepareFoodRequest]) (*connect.Response[v1alpha1.PrepareFoodResponse], error) {
	return c.prepareFood.CallUnary(ctx, req)
}

// KitchenServiceHandler is an implementation of the kitchen.v1alpha1.KitchenService service.
type KitchenServiceHandler interface {
	CookFood(context.Context, *connect.Request[v1alpha1.CookFoodRequest]) (*connect.Response[v1alpha1.CookFoodResponse], error)
	PrepareFood(context.Context, *connect.Request[v1alpha1.PrepareFoodRequest]) (*connect.Response[v1alpha1.PrepareFoodResponse], error)
}

// NewKitchenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKitchenServiceHandler(svc KitchenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kitchenServiceMethods := v1alpha1.File_kitchen_v1alpha1_kitchen_proto.Services().ByName("KitchenService").Methods()
	kitchenServiceCookFoodHandler := connect.NewUnaryHandler(
		KitchenServiceCookFoodProcedure,
		svc.CookFood,
		connect.WithSchema(kitchenServiceMethods.ByName("CookFood")),
		connect.WithHandlerOptions(opts...),
	)
	kitchenServicePrepareFoodHandler := connect.NewUnaryHandler(
		KitchenServicePrepareFoodProcedure,
		svc.PrepareFood,
		connect.WithSchema(kitchenServiceMethods.ByName("PrepareFood")),
		connect.WithHandlerOptions(opts...),
	)
	return "/kitchen.v1alpha1.KitchenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KitchenServiceCookFoodProcedure:
			kitchenServiceCookFoodHandler.ServeHTTP(w, r)
		case KitchenServicePrepareFoodProcedure:
			kitchenServicePrepareFoodHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKitchenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKitchenServiceHandler struct{}

func (UnimplementedKitchenServiceHandler) CookFood(context.Context, *connect.Request[v1alpha1.CookFoodRequest]) (*connect.Response[v1alpha1.CookFoodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kitchen.v1alpha1.KitchenService.CookFood is not implemented"))
}

func (UnimplementedKitchenServiceHandler) PrepareFood(context.Context, *connect.Request[v1alpha1.PrepareFoodRequest]) (*connect.Response[v1alpha1.PrepareFoodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kitchen.v1alpha1.KitchenService.PrepareFood is not implemented"))
}
